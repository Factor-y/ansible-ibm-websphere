# Install Java SDK for WebSphere Application Server - Network Deployment
#
# Variables used in this playbook that can be setup at hosts file.
#
# HTTP server that has installation Files
#   was_fixes_repository_url: http://192.168.1.1/was/8.5.5
#
---
- name:                     Install IBM WAS Java SDK
  hosts:                    dmgr,was-servers
  become:                   true
  vars:
    __tmp_dir:              "{{ tmp_dir | default('/opt/IBM/Binaries') }}/was_fixes"
    __logs_dir:             "{{ tmp_dir | default('/opt/IBM/Binaries') }}/logs"
    __iim_install_location: "{{ iim_install_location  | default('/opt/IBM/InstallationManager') }}"
    __was_install_location: "{{ was_install_location  | default('/opt/IBM/WebSphere/AppServer') }}"
    __imshared_location:    "{{ imshared_location  | default('/opt/IBM/IMShared') }}"
    __now:                  "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    __rsp_file:             "{{ __logs_dir }}/was_java.rsp"
    __log_file:             "{{ __logs_dir }}/was_java_install.{{ __now }}.log"
    __tpl_file:             "was_java.rsp.j2"

    __this_version:         "{{ was_java_version | default('8.0.2010.20160224_1829') }}"
    __this_files:
      - { bf: 8.0.2.10-WS-IBMWASJAVA-Linux.zip, bfs: 7338d90d760596d95eb9622aa6a5ceb21c5604cece702abeeb8565c331f2aaa1 }
    __version_check:        "Installed com.ibm.websphere.IBMJAVA.v80_{{ __this_version }}"

  tasks:
    - name:                 Install pre-requisites
      yum:                  name={{item}} state=present
      with_items:
        - unzip
        - tar
        - wget
      when:                 (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS")

    - name:                 Is Product already Installed?
      command:              egrep {{ __this_version }} /var/ibm/InstallationManager/installed.xml
      register:             version_already_installed
      ignore_errors:        true

    - name:                 Cleanup Binaries directory
      file:                 path={{ __tmp_dir }} state=absent
      when:                 version_already_installed.rc != 0
      ignore_errors:        true

    - name:                 Create Binaries directory
      file:                 path={{ __tmp_dir }} state=directory mode=0755
      when:                 version_already_installed.rc != 0

    - name:                 Create Logs directory
      file:                 path={{ __logs_dir }} state=directory mode=0755
      when:                 version_already_installed.rc != 0

    - name:                 Download WAS Java
      get_url:
        url:                "{{ was_repository_url }}/{{ item.bf }}"
        dest:               "{{ __tmp_dir }}/{{ item.bf }}"
        mode:               0755
        checksum:           sha256:{{ item.bfs }}
      with_items:           "{{ __this_files }}"
      when:                 version_already_installed.rc != 0

    - name:                 Extract WAS Java
      unarchive:
        src:                "{{ __tmp_dir }}/{{ item.bf }}"
        dest:               "{{ __tmp_dir }}/"
        copy:               no
      with_items:           "{{ __this_files }}"
      when:                 version_already_installed.rc != 0

    - name:                 Generate Response file
      template:
        src:                "{{ __tpl_file }}"
        dest:               "{{ __rsp_file }}"
      when:                 version_already_installed.rc != 0

    - name:                 Disable Repository on Installation Manager
      replace:
        path:               /var/ibm/InstallationManager/.settings/com.ibm.cic.agent.core.prefs
        regexp:             '(\s*)RepositoryIsOpen=true(\s*)'
        replace:            '\1RepositoryIsOpen=false\2'
        backup:             yes
      ignore_errors:        true

    - name:                 Install IBM WAS Java SDK
      command:
        chdir={{ __tmp_dir }}
        {{ __iim_install_location }}/eclipse/tools/imcl -acceptLicense -sVP -log {{ __log_file }} input {{ __rsp_file }}
      register:             cout
      changed_when:        ( cout.stdout.find(__version_check) != -1)
      when:                 version_already_installed.rc != 0

    #- debug:                var=cout

    - name:                 Cleanup Binaries directory
      file:                 path={{ __tmp_dir }} state=absent
      when:                 version_already_installed.rc != 0
